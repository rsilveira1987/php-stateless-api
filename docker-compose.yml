version: '3'

services:

  proxy:
    container_name: reverse_proxy
    image: nginx:latest
    restart: always
    ports:
      - 80:80
      # - 443:443
    volumes:
      # - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      
      #- ./nginx/conf.d/default-ssl.conf.template:/etc/nginx/conf.d/default.conf.template
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./certbot/www:/var/www/certbot/:ro
      # - ./certbot/conf/:/etc/nginx/ssl/:ro
    # environment:
      # - SERVER_NAME=${SERVER_NAME}
    # command: /bin/bash -c "sed 's/{{SERVER_NAME}}/${SERVER_NAME}/g' /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  myapp:
    # container_name: app1 # overwriten by replica mode
    image: app:latest
    build:
      context: ./docker/apache
      dockerfile: Dockerfile
    restart: always
    expose:
      - 8080
    volumes:
        - ./app:/var/www/html/
    environment:
      - REDIS_HOST=cache
      - REDIS_PORT=6379
    depends_on:
      - mysql
    links:
      - mysql
    deploy:
      mode: replicated
      replicas: 2

  redis:
    container_name: cache
    image: redis:7.0.10
    restart: always

  mysql:
    container_name: dbserver
    image: mysql:5.6.51
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_PASSWORD=root
      - MYSQL_DATABASE=apidb
    volumes:
      - apidb:/var/lib/mysql
      - ./docker/mysql/new_schema.sql:/docker-entrypoint-initdb.d/1.sql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/2.sql
volumes:
  apidb:
    driver: local
